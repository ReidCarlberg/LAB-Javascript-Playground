<!--
Copyright (c) 2011, salesforce.com, inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided
that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the
 following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
the following disclaimer in the documentation and/or other materials provided with the distribution.

Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or
promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-->
<apex:component controller="RemoteTKController">
    <script>
var remotetk = window.remotetk;

if (remotetk === undefined) {
    remotetk = {};
}

if (remotetk.Client === undefined) {
    function handleResult(result, callback, error, nullok) {
        if (result) {
            result = JSON.parse(result);
            if ( Array.isArray(result) && result[0].message && result[0].errorCode ) {
                if ( typeof error === 'function' ) {
                    error(result);
                }
            } else {
                callback(result);
            }
        } else if (typeof nullok !== 'undefined' && nullok) {
            callback();
        } else {
            error([{ message : "Null return from action method","errorCode":"NULL_RETURN"}]);
        }        
    }
        
    /**
     * The Client provides a convenient abstraction similar to the Force.com 
     * REST API, allowing JavaScript in Visualforce pages access to data 
     * without consuming API calls.
     * @constructor
     */
    remotetk.Client = function(){
    }

    /** NOOP: for compatibility with forcetk
    */
    remotetk.Client.prototype.setSessionToken = function() {}
    remotetk.Client.prototype.setRefreshToken = function() {}
    remotetk.Client.prototype.setUserAgentString = function() {}
        
    /*
     * Completely describes the individual metadata at all levels for the 
     * specified object.
     * @param objtype object type; e.g. "Account"
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.describe = function(objtype, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.describe}', objtype, function(result){
            handleResult(result, callback, error);
        }, { 
            escape: false
        });
    }
        
    /*
     * Creates a new record of the given type.
     * @param objtype object type; e.g. "Account"
     * @param fields an object containing initial field names and values for 
     *               the record, e.g. {Name: "salesforce.com", TickerSymbol: 
     *               "CRM"}
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.create = function(objtype, fields, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.create}', objtype, JSON.stringify(fields), function(result){
            handleResult(result, callback, error);
        }, { 
            escape: false
        });
    }
        
    /*
     * Retrieves field values for a record of the given type.
     * @param objtype object type; e.g. "Account"
     * @param id the record's object ID
     * @param [fields=null] optional comma-separated list of fields for which 
     *               to return values; e.g. Name,Industry,TickerSymbol
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.retrieve = function(objtype, id, fieldlist, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.retrieve}', objtype, id, fieldlist, function(result){
            handleResult(result, callback, error);
        }, { 
            escape: false
        });
    }
    
    /* 
     * Upsert - creates or updates record of the given type, based on the 
     * given external Id.
     * @param objtype object type; e.g. "Account"
     * @param externalIdField external ID field name; e.g. "accountMaster__c"
     * @param externalId the record's external ID value
     * @param fields an object containing field names and values for 
     *               the record, e.g. {Name: "salesforce.com", TickerSymbol: 
     *               "CRM"}
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.upsert = function(objtype, externalIdField, externalId, fields, callback, error) {
        Visualforce.remoting.Manager.invokeAction('$RemoteAction.RemoteTKController.upser', objtype, externalIdField, externalId, JSON.stringify(fields), function(result){
            handleResult(result, callback, error, true);
        }, { 
                escape: false
        });
    }
        
    /*
     * Updates field values on a record of the given type.
     * @param objtype object type; e.g. "Account"
     * @param id the record's object ID
     * @param fields an object containing initial field names and values for 
     *               the record, e.g. {Name: "salesforce.com", TickerSymbol: 
     *               "CRM"}
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.update = function(objtype, id, fields, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.updat}', objtype, id, JSON.stringify(fields), function(result){
            handleResult(result, callback, error, true);
        }, { 
            escape: false
        });
    }

    /*
     * Deletes a record of the given type. Unfortunately, 'delete' is a 
     * reserved word in JavaScript.
     * @param objtype object type; e.g. "Account"
     * @param id the record's object ID
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.del = function(objtype, id, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.del}', objtype, id, function(result){
            handleResult(result, callback, error, true);
        }, { 
            escape: false
        });
    }

    /*
     * Executes the specified SOQL query.
     * @param soql a string containing the query to execute - e.g. "SELECT Id, 
     *             Name from Account ORDER BY Name LIMIT 20"
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.query = function(soql, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.query}', soql, function(result){
            handleResult(result, callback, error);
        }, { 
            escape: false
        });
    }        

    /*
     * Executes the specified SOSL search.
     * @param sosl a string containing the search to execute - e.g. "FIND 
     *             {needle}"
     * @param callback function to which response will be passed
     * @param [error=null] function to which jqXHR will be passed in case of error
     */
    remotetk.Client.prototype.search = function(sosl, callback, error) {
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RemoteTKController.search}', sosl, function(result){
            handleResult(result, callback, error);
        }, { 
            escape: false
        });
    }
}
    </script>
</apex:component>